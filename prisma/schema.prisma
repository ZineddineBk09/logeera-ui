// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserType {
  INDIVIDUAL
  COMPANY
}

enum UserStatus {
  PENDING
  TRUSTED
  BLOCKED
}

enum UserRole {
  USER
  MODERATOR
  ADMIN
}

enum VehicleType {
  CAR
  VAN
  TRUCK
  BIKE
}

enum PayloadType {
  PARCEL
  PASSENGER
}

enum TripStatus {
  PUBLISHED
  COMPLETED
  CANCELLED
}

enum RequestStatus {
  PENDING
  ACCEPTED
  REJECTED
  IN_TRANSIT
  DELIVERED
  COMPLETED
  CANCELLED
}

enum ContactCategory {
  GENERAL
  TECHNICAL
  SAFETY
  BILLING
  FEEDBACK
}

enum ContactStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
}

enum ContactPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

model User {
  id              String     @id @default(uuid())
  name            String
  email           String     @unique
  phoneNumber     String
  passwordHash    String
  type            UserType   @default(INDIVIDUAL)
  officialIdNumber String?
  status          UserStatus @default(PENDING)
  role            UserRole   @default(USER)
  averageRating   Float      @default(0)
  ratingCount     Int        @default(0)
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt

  // Relations
  publishedTrips  Trip[]
  requests        Request[]
  receivedRatings Rating[] @relation("RatedUser")
  givenRatings    Rating[] @relation("ReviewerUser")
  chatsAsUserA    Chat[]   @relation("ChatUserA")
  chatsAsUserB    Chat[]   @relation("ChatUserB")
  sentMessages    Message[]
  blockedUsers    BlockedUser[] @relation("BlockerUser")
  blockedByUsers  BlockedUser[] @relation("BlockedUser")

  @@map("users")
}

model Trip {
  id              String     @id @default(uuid())
  publisherId     String
  originGeom      String     // WKT format
  destinationGeom String     // WKT format
  originName      String
  destinationName String
  departureAt     DateTime
  vehicleType     VehicleType
  payloadType     PayloadType @default(PARCEL)
  capacity        Int
  bookedSeats     Int        @default(0)
  pricePerSeat    Float      @default(45.0)
  parcelWeight    Float?     // Weight in kg for parcels
  passengerCount  Int?       // Number of passengers
  status          TripStatus @default(PUBLISHED)
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt

  // Relations
  publisher       User       @relation(fields: [publisherId], references: [id])
  requests        Request[]
  ratings         Rating[]

  @@map("trips")
}

model Request {
  id          String        @id @default(uuid())
  tripId      String
  applicantId String
  status      RequestStatus @default(PENDING)
  acceptedAt  DateTime?     // When request was accepted
  receivedAt  DateTime?     // When parcel/passenger was received
  deliveredAt DateTime?     // When delivery was completed
  cancelledAt DateTime?     // When request was cancelled
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // Relations
  trip        Trip          @relation(fields: [tripId], references: [id])
  applicant   User          @relation(fields: [applicantId], references: [id])

  @@map("requests")
}

model Chat {
  id        String    @id @default(uuid())
  userAId   String
  userBId   String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  // Relations
  userA     User      @relation("ChatUserA", fields: [userAId], references: [id])
  userB     User      @relation("ChatUserB", fields: [userBId], references: [id])
  messages  Message[]

  @@unique([userAId, userBId])
  @@map("chats")
}

model Message {
  id        String   @id @default(uuid())
  chatId    String
  senderId  String
  content   String
  createdAt DateTime @default(now())

  // Relations
  chat      Chat     @relation(fields: [chatId], references: [id])
  sender    User     @relation(fields: [senderId], references: [id])

  @@map("messages")
}

model Rating {
  id              String   @id @default(uuid())
  ratedUserId     String
  reviewerUserId  String
  tripId          String?  // Optional: link rating to specific trip
  value           Int      // 1-5
  comment         String?
  createdAt       DateTime @default(now())

  // Relations
  ratedUser       User     @relation("RatedUser", fields: [ratedUserId], references: [id])
  reviewerUser    User     @relation("ReviewerUser", fields: [reviewerUserId], references: [id])
  trip            Trip?    @relation(fields: [tripId], references: [id])

  @@unique([reviewerUserId, tripId]) // Prevent duplicate ratings for same trip
  @@map("ratings")
}

model BlockedUser {
  id          String   @id @default(uuid())
  blockerId   String
  blockedId   String
  reason      String?
  createdAt   DateTime @default(now())

  // Relations
  blocker     User     @relation("BlockerUser", fields: [blockerId], references: [id])
  blocked     User     @relation("BlockedUser", fields: [blockedId], references: [id])

  @@unique([blockerId, blockedId])
  @@map("blocked_users")
}

model ContactSubmission {
  id          String          @id @default(uuid())
  name        String
  email       String
  subject     String
  category    ContactCategory
  message     String
  status      ContactStatus   @default(OPEN)
  priority    ContactPriority @default(MEDIUM)
  response    String?
  respondedBy String?
  respondedAt DateTime?
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt

  @@map("contact_submissions")
}